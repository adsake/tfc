function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e25) { throw _e25; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e26) { didErr = true; err = _e26; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BricksIntersect = /*#__PURE__*/_createClass(function BricksIntersect() {
  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  _classCallCheck(this, BricksIntersect);

  var t = e.element || !1,
      r = e.callback || !1,
      i = !e.hasOwnProperty("once") || e.once;

  if ("IntersectionObserver" in window) {
    var s = new IntersectionObserver(function (e, s) {
      e.forEach(function (e) {
        e.isIntersecting && (t && r && r(e.target), i && s.unobserve(e.target));
      });
    }, {
      threshold: e.threshold || 0,
      root: e.root || null,
      rootMargin: (e === null || e === void 0 ? void 0 : e.rootMargin) || "0px"
    });
    t instanceof Element && s.observe(t);
  } else {
    var _e = !1,
        _i = function _i() {
      !1 === _e && (_e = !0, t.getBoundingClientRect().top <= window.innerHeight && t.getBoundingClientRect().bottom >= 0 && "none" !== window.getComputedStyle(t).display && t && r && r(t), _e = !1);
    };

    _i(), document.addEventListener("scroll", _i), window.addEventListener("resize", _i), window.addEventListener("orientationchange", _i);
  }
});

function bricksLazyLoad() {
  var e = bricksQuerySelectorAll(document, ".bricks-lazy-hidden");
  var t = window.bricksData.offsetLazyLoad || 300;
  e.forEach(function (e) {
    new BricksIntersect({
      element: e,
      callback: function callback(e) {
        (function (e) {
          if (e.classList.add("wait"), e.dataset.src && (e.src = e.dataset.src, delete e.dataset.src, e.style = ""), e.dataset.sizes && (e.sizes = e.dataset.sizes, delete e.dataset.sizes), e.dataset.srcset && (e.srcset = e.dataset.srcset, delete e.dataset.srcset), e.dataset.style) {
            var _t = e.getAttribute("style") || "";

            _t += e.dataset.style, e.setAttribute("style", _t), e.classList.contains("splide__slide") || delete e.dataset.style;
          }

          e.classList.remove("bricks-lazy-hidden"), e.classList.remove("wait"), e.classList.contains("bricks-lazy-load-isotope") && bricksIsotope();
        })(e);
      },
      rootMargin: "".concat(t, "px")
    });
  });
}

function BricksIsInViewport(e) {
  var t = e.getBoundingClientRect();
  return t.top >= 0 && t.left >= 0 && t.bottom <= (window.innerHeight || document.documentElement.clientHeight) && t.right <= (window.innerWidth || document.documentElement.clientWidth);
}

function bricksQuerySelectorAll(e, t) {
  if (Array.isArray(t)) {
    var r = [];
    return t.forEach(function (t) {
      r = r.concat(Array.prototype.slice.apply(e.querySelectorAll(t)));
    }), r;
  }

  return Array.prototype.slice.apply(e.querySelectorAll(t));
}

function bricksAnimation() {
  bricksQuerySelectorAll(document, ".brx-animated").forEach(function (e) {
    new BricksIntersect({
      element: e,
      callback: function callback(e) {
        var t = e.dataset.animation;
        t && (e.classList.add("brx-animate-".concat(t)), e.removeAttribute("data-animation"));
      }
    });
  });
}

function bricksQueryInfiniteScroll() {
  bricksQuerySelectorAll(document, ".brx-infinite-scroll").forEach(function (e) {
    var _e$dataset;

    var t = ((_e$dataset = e.dataset) === null || _e$dataset === void 0 ? void 0 : _e$dataset.observerMargin) || "1px",
        r = e.dataset.queryElementId,
        i = e.dataset.queryVars;
    window.bricksData.infiniteScrollQueries[r] = {
      page: e.dataset.page,
      maxPages: e.dataset.maxPages,
      queryVars: i,
      observerMargin: t
    };
    var s = e.classList.contains("bricks-isotope-sizer");
    var a = s ? e.previousElementSibling : Array.from(document.querySelectorAll(".brxe-".concat(r))).pop();
    s || e.remove(), a && (a.dataset.queryElementId = r, new BricksIntersect({
      element: a,
      callback: function callback(e) {
        return bricksQueryLoadPage(e);
      },
      once: 1,
      rootMargin: t
    }));
  });
}

function bricksQueryLoadPage(e) {
  var t = e.dataset.queryElementId,
      r = window.bricksData.infiniteScrollQueries[t];
  if (!r || r !== null && r !== void 0 && r.isLoading) return;
  var i = parseInt(r.page || 1) + 1;
  var s = parseInt(r.maxPages || 1);
  if (i > s) return void delete window.bricksData.infiniteScrollQueries[t];
  window.bricksData.infiniteScrollQueries[t].isLoading = 1;
  var a = {
    postId: window.bricksData.postId,
    queryElementId: t,
    queryVars: r.queryVars,
    page: i,
    nonce: window.bricksData.nonce
  };
  var o = window.bricksData.restApiUrl.concat("load_query_page");
  var n = new XMLHttpRequest();
  n.open("POST", o, !0), n.setRequestHeader("Content-Type", "application/json; charset=UTF-8"), n.setRequestHeader("X-WP-Nonce", window.bricksData.wpRestNonce), n.onreadystatechange = function () {
    if (n.readyState === XMLHttpRequest.DONE) {
      var s = n.status;

      if (0 === s || s >= 200 && s < 400) {
        var _r = JSON.parse(n.response);

        var _s = (_r === null || _r === void 0 ? void 0 : _r.html) || !1,
            _a = (_r === null || _r === void 0 ? void 0 : _r.styles) || !1;

        _s && e.insertAdjacentHTML("afterend", _s), _a && document.body.insertAdjacentHTML("beforeend", _a), window.bricksData.infiniteScrollQueries[t].page = i;
      }

      window.bricksData.infiniteScrollQueries[t].isLoading = 0, bricksLazyLoad(), setTimeout(function () {
        var i;
        bricksAnimation(), e.classList.contains("brxe-".concat(t)) ? i = Array.from(document.querySelectorAll(".brxe-".concat(t))).pop() : (i = e.parentNode.querySelector(".bricks-isotope-sizer").previousElementSibling, bricksIsotope()), i.dataset.queryElementId = t, BricksIsInViewport(i) ? bricksQueryLoadPage(i) : new BricksIntersect({
          element: i,
          callback: function callback(e) {
            return bricksQueryLoadPage(e);
          },
          once: !0,
          rootMargin: r.observerMargin
        });
      }, 250);
    }
  }, n.send(JSON.stringify(a));
}

function bricksQueryPagination() {
  bricksQuerySelectorAll(document, ".brx-ajax-pagination a").forEach(function (e) {
    var _e$dataset2;

    ((_e$dataset2 = e.dataset) === null || _e$dataset2 === void 0 ? void 0 : _e$dataset2.ajaxPagination) || (e.dataset.ajaxPagination = 1, e.addEventListener("click", function (e) {
      var _i$dataset;

      var t = e.currentTarget,
          r = t.getAttribute("href"),
          i = t.closest(".brx-ajax-pagination"),
          s = i === null || i === void 0 ? void 0 : (_i$dataset = i.dataset) === null || _i$dataset === void 0 ? void 0 : _i$dataset.queryElementId,
          a = document.querySelector(".brxe-".concat(s));
      if (!a) return;
      e.preventDefault();
      var o = new XMLHttpRequest();
      o.open("GET", r, !0), o.responseType = "document", o.onload = function () {
        if (this.readyState === XMLHttpRequest.DONE) {
          var e = this.status;

          if (0 === e || e >= 200 && e < 400) {
            var _e2 = this.responseXML,
                _t2 = a.parentNode,
                _o = document.createElement("div");

            _o.style.display = "none", a.insertAdjacentElement("beforebegin", _o);

            _t2.querySelectorAll(".brxe-".concat(s)).forEach(function (e) {
              return e.remove();
            });

            _e2.querySelectorAll(".brxe-".concat(s)).forEach(function (e) {
              return _o.insertAdjacentElement("beforebegin", e);
            }), _o.remove();

            var n = _e2.querySelector(".brx-ajax-pagination[data-query-element-id=\"".concat(s, "\"]"));

            i.replaceWith(n), bricksLazyLoad(), bricksAnimation(), bricksQueryPagination(), window.history.pushState({}, "", r);
          }
        }
      }, o.send();
    }));
  });
}

function bricksStickyHeader() {
  var e = document.querySelector("#brx-header.sticky");
  if (!e) return;
  var t,
      r,
      i = document.querySelector(".bricks-site-logo"),
      s = -1,
      a = e.hasAttribute("data-slide-up-after") ? e.getAttribute("data-slide-up-after") : 0;
  i && (t = i.getAttribute("data-bricks-logo"), r = i.getAttribute("data-bricks-logo-inverse"));

  var o = function o() {
    var o = window.pageYOffset;
    o > 0 ? (e.classList.add("scrolling"), i && r && (i.src = r, i.srcset = "")) : (e.classList.remove("scrolling"), i && r && (i.src = t)), a && (o > s && s >= 0 ? o > a && e.classList.add("slide-up") : e.classList.remove("slide-up")), s = o;
  };

  window.addEventListener("scroll", o), o();
}

function bricksNavSubmenuPositioning() {
  var e = document.querySelector(".bricks-nav-menu");
  e && bricksQuerySelectorAll(e, ".sub-menu").forEach(function (e) {
    var t = e.getBoundingClientRect();
    t.width + t.right >= (window.innerWidth || document.documentElement.clientWidth) && e.classList.add("overflows-viewport");
  });
}

function bricksOnePageNavigation() {
  var e = document.getElementById("bricks-one-page-navigation");
  if (!bricksIsFrontend || !e) return;
  var t = bricksQuerySelectorAll(document, "#brx-content > *"),
      r = [],
      i = "",
      s = "",
      a = "";

  function o() {
    var e = window.scrollY;
    r.forEach(function (t) {
      var r = document.getElementById(t),
          i = r.offsetTop,
          s = i + r.offsetHeight;
      e >= i - 1 && e < s - 1 ? document.querySelector(".bricks-one-page-".concat(t)).classList.add("active") : document.querySelector(".bricks-one-page-".concat(t)).classList.remove("active");
    });
  }

  t && (t.forEach(function (t) {
    i = t.getAttribute("id"), i && (r.push(i), a = document.createElement("li"), s = document.createElement("a"), s.classList.add("bricks-one-page-".concat(i)), s.setAttribute("href", "#".concat(i)), a.appendChild(s), e.appendChild(a));
  }), window.addEventListener("load", o), window.addEventListener("resize", o), document.addEventListener("scroll", o));
}

function bricksSmoothScroll() {
  bricksQuerySelectorAll(document, 'a[href^="#"]:not([href="#"])').forEach(function (e) {
    e.addEventListener("click", function (t) {
      t.preventDefault();
      var r = e.href.split("#")[1];
      document.getElementById(r) && document.querySelector(this.getAttribute("href")).scrollIntoView({
        behavior: "smooth"
      });
    });
  });
}

function bricksSearchOverlay() {
  var e = bricksQuerySelectorAll(document, ".brxe-search");
  e && e.forEach(function (e) {
    var t = e.querySelector(".overlay-trigger");
    if (!t) return;
    var r = e.querySelector(".bricks-search-overlay");
    r && (document.addEventListener("keyup", function (e) {
      "Escape" === e.key && r.classList.remove("show");
    }), t.addEventListener("click", function (t) {
      r.classList.toggle("show"), setTimeout(function () {
        e.querySelector("input[type=search]").focus();
      }, 200);
    }), r.querySelector(".close").addEventListener("click", function (e) {
      r.classList.toggle("show");
    }));
  });
}

function bricksHandleA11yMenu(e) {
  var t,
      r,
      i = bricksQuerySelectorAll(e, '[role="menubar"] > li > a'),
      s = bricksQuerySelectorAll(e, '[role="menubar"] [aria-haspopup="true"] .sub-menu li a'),
      a = 9,
      o = 13,
      n = 32,
      l = function l(e) {
    return (e = t + e) == i.length || e < 0 || (t = e, i[e].focus(), !1);
  },
      c = function c(e, t) {
    r += t;
    var i = e.querySelectorAll("li > a"),
        s = !1;
    return r >= i.length ? (s = l(1), d(), s) : r < 0 ? (s = l(-1), d(), s) : (i[r].focus(), !1);
  },
      d = function d() {
    i.forEach(function (e, t) {
      e.parentNode.setAttribute("aria-expanded", "false");
    });
  };

  i.forEach(function (e, i) {
    e.parentNode.setAttribute("data-top-index", i), e.addEventListener("focus", function () {
      d(), t = parseInt(e.parentNode.getAttribute("data-top-index"));
    }), e.addEventListener("keydown", function (t) {
      var i = !1;

      switch (t.keyCode) {
        case n:
          r = -1, "true" === e.parentNode.getAttribute("aria-haspopup") && ("true" === e.parentNode.getAttribute("aria-expanded") ? e.parentNode.setAttribute("aria-expanded", "false") : (e.parentNode.setAttribute("aria-expanded", "true"), bricksQuerySelectorAll(e.parentNode, ".sub-menu li").forEach(function (e, t) {
            e.setAttribute("aria-expanded", "true");
          }))), i = !0;
          break;

        case a:
          var _s2 = !1;

          if ("true" !== e.parentNode.getAttribute("aria-expanded") || t.shiftKey) _s2 = t.shiftKey ? l(-1) : l(1);else {
            var _e3 = this.parentNode.querySelector("ul");

            _s2 = c(_e3, 1);
          }
          if (_s2) return !0;
          i = !0;
      }

      i && t.preventDefault();
    });
  }), s.forEach(function (e, t) {
    e.setAttribute("tabindex", "-1"), e.addEventListener("keydown", function (e) {
      var t = !1;

      switch (e.keyCode) {
        case a:
          var _r2 = !1;

          if (_r2 = e.shiftKey ? c(this.parentNode.parentNode, -1) : c(this.parentNode.parentNode, 1), _r2) return !0;
          t = !0;
          break;

        case o:
          return !0;
      }

      return t && (e.preventDefault(), e.stopPropagation()), !1;
    });
  });
}

function bricksNavMenuA11y() {
  bricksQuerySelectorAll(document, ".bricks-nav-menu-wrapper").forEach(function (e) {
    bricksHandleA11yMenu(e);
  });
}

function bricksMobileMenuToggles() {
  bricksQuerySelectorAll(document, ".bricks-mobile-menu-toggle").forEach(function (e) {
    e.addEventListener("click", function (e) {
      var t = e.target.closest(".brxe-nav-menu");
      t.classList.toggle("show-mobile-menu"), bricksHandleA11yMenu(t.querySelector(".bricks-mobile-menu-wrapper")), bricksMobileMenuBodyNoScroll();
    }, !1);
  }), document.addEventListener("click", function (e) {
    var t = e.target.closest(".brxe-nav-menu");
    if (t && e.target.classList.contains("bricks-mobile-menu-overlay")) return t.classList.remove("show-mobile-menu"), void bricksMobileMenuBodyNoScroll();
    if ("A" === e.target.tagName && e.target.parentNode.classList.contains("menu-item-has-children") && "false" == e.target.parentNode.getAttribute("aria-expanded") && document.querySelector(".show-mobile-menu")) return e.preventDefault(), e.stopPropagation(), void e.target.parentNode.setAttribute("aria-expanded", !0);

    if (e.target.closest(".bricks-mobile-menu-wrapper")) {
      var r = "A" === e.target.tagName ? e.target : e.target.querySelector("a");
      t && r && -1 !== r.getAttribute("href").indexOf("#") && t.classList.remove("show-mobile-menu"), bricksMobileMenuBodyNoScroll();
    }
  }), bricksQuerySelectorAll(document, ".bricks-mobile-submenu-toggle").forEach(function (e) {
    e.addEventListener("click", function (e) {
      var t = e.target.closest("li.menu-item-has-children"),
          r = t.getAttribute("aria-expanded");
      t.setAttribute("aria-expanded", "false" === r ? "true" : "false");
    });
  });
}

function bricksMobileMenuBodyNoScroll() {
  document.querySelector(".show-mobile-menu") ? document.body.classList.add("no-scroll") : document.body.classList.remove("no-scroll");
}

function bricksAlertDismiss() {
  alertDismissables = bricksQuerySelectorAll(document, ".brxe-alert svg"), alertDismissables.forEach(function (e) {
    e.addEventListener("click", function () {
      e.closest(".brxe-alert").remove();
    });
  });
}

function bricksTabs() {
  var e = bricksQuerySelectorAll(document, ".brxe-tabs"),
      t = bricksQuerySelectorAll(document, ".brxe-tabs-nested");
  t.length && (e = e.concat(t)), e.forEach(function (e) {
    var t = bricksQuerySelectorAll(e, ".tab-title");
    t.forEach(function (r, i) {
      var s = bricksQuerySelectorAll(e, ".tab-pane");
      0 === i && r.classList.add("brx-open"), s.forEach(function (e, t) {
        0 === t && e.classList.add("brx-open");
      }), r.addEventListener("click", function () {
        t.forEach(function (e, t) {
          t === i ? r.classList.add("brx-open") : e.classList.remove("brx-open");
        }), s.forEach(function (e, t) {
          t === i ? e.classList.add("brx-open") : e.classList.remove("brx-open");
        });
      });
    });
  });
}

function bricksLightbox() {
  var e = bricksQuerySelectorAll(document, '[data-link="lightbox"]');
  if (!e.length) return;
  var t = document.getElementById("bricks-lightbox"),
      r = !!t && t.querySelector(".inner"),
      i = !!t && t.querySelector(".close");
  t || (t = document.createElement("div"), t.id = "bricks-lightbox", document.body.appendChild(t), r || (r = document.createElement("div"), r.classList.add("inner"), t.appendChild(r)), i || (i = document.createElement("div"), i.classList.add("close"), i.innerText = "×", t.appendChild(i))), t.addEventListener("click", function (e) {
    ("bricks-lightbox" === e.target.id || e.target.classList.contains("inner") || e.target.classList.contains("close")) && (t.classList.remove("show"), r.innerHTML = "");
  }), document.onkeydown = function (e) {
    "Escape" === e.key && (t.classList.remove("show"), r.innerHTML = "");
  }, e.forEach(function (e) {
    var i = !1;
    e.addEventListener("click", function (s) {
      s.preventDefault();
      var a = e.dataset.bricksLightboxImageUrl;

      if (a) {
        i = !0;

        var _e4 = document.createElement("img");

        _e4.src = a, r.appendChild(_e4);
      }

      var o = e.dataset.bricksLightboxVideoUrl;

      if (o) {
        i = !0;

        var _e5 = !1;

        if (-1 !== o.indexOf("youtube.com") && (_e5 = !0, o = o.replace("watch?v=", "embed/"), o += "?autoplay=1", o += "&rel=0"), -1 !== o.indexOf("vimeo.com") && (_e5 = !0, -1 === o.indexOf("player.vimeo.com/video") && (o = o.replace("vimeo.com", "player.vimeo.com/video")), o += "?autoplay=1"), _e5) {
          var _e6 = document.createElement("iframe");

          _e6.setAttribute("src", o), _e6.setAttribute("allow", "autoplay"), _e6.setAttribute("allowfullscreen", 1), r.appendChild(_e6);
        } else {
          var _e7 = document.createElement("video");

          _e7.setAttribute("src", o), _e7.setAttribute("autoplay", 1), _e7.setAttribute("controls", 1), _e7.setAttribute("playsinline", 1), r.appendChild(_e7);
        }
      }

      i && t.classList.add("show");
    });
  });
}

function bricksVideoOverlayClickDetector() {
  if (!bricksIsFrontend) return;
  var e = bricksQuerySelectorAll(document, ".bricks-video-overlay"),
      t = bricksQuerySelectorAll(document, ".bricks-video-overlay-icon");
  bricksVideoOverlayElements = e.concat(t), bricksVideoOverlayElements.length && bricksVideoOverlayElements.forEach(function (e) {
    e.addEventListener("click", function (e) {
      var t = e.target.parentNode,
          r = t.querySelector("iframe");
      r && r.getAttribute("src") && (r.src += "&autoplay=1");
      var i = t.querySelector("video");
      i && i.play();
    });
  });
}

function bricksBackgroundVideoInit() {
  var e = bricksQuerySelectorAll(document, ".bricks-background-video-wrapper");
  e && e.forEach(function (e) {
    if (e.classList.contains("loaded") || e.querySelector("iframe")) return;
    var t = e.getAttribute("data-background-video-url"),
        r = e.getAttribute("data-background-video-scale"),
        i = !1;
    if (!t) return;
    var s,
        a = e.getAttribute("data-background-video-ratio") || "16:9",
        o = parseInt(a.split(":")[0] || 16),
        n = parseInt(a.split(":")[1] || 9);

    if (-1 !== t.indexOf("youtube.com")) {
      i = !0;

      var _e8 = t.lastIndexOf("="),
          _r3 = t.slice(_e8 + 1);

      t += "?origin=".concat(window.location.origin), t += "&rel=0", t += "&autoplay=1", t += "&mute=1", t += "&widgetid=1", t += "&controls=0", t += "&showinfo=0", t += "&modestbranding=1", t += "&cc_load_policy=0", t += "&iv_load_policy=3", t += "&autohide=0", t += "&loop=1", t += "&playlist=".concat(_r3), t += "&enablejsapi=1", t = t.replace("watch?v=", "embed/");
    }

    -1 !== t.indexOf("vimeo.com") && (i = !0, t += "?background=1", t += "&byline=0", t += "&portrait=0", t += "&title=0", -1 === t.indexOf("player.vimeo.com/video") && (t = t.replace("vimeo.com", "player.vimeo.com/video"))), i ? (s = document.createElement("iframe"), s.setAttribute("width", 640), s.setAttribute("height", 360), s.setAttribute("src", t), s.setAttribute("allow", "autoplay"), s.setAttribute("allowfullscreen", 1), r && (s.style.transform = "scale(".concat(r, ")")), e.removeChild(e.querySelector("video"))) : (s = e.querySelector("video"), r && (s.style.transform = "scale(".concat(r, ")"))), bricksIsFrontend ? e.classList.contains("bricks-lazy-video") && new BricksIntersect({
      element: e,
      callback: function callback(e) {
        e.classList.remove("bricks-lazy-video"), i ? e.appendChild(s) : s.src = t;
      }
    }) : i ? e.appendChild(s) : s.src = t, e.classList.add("loaded"), new ResizeObserver(function (t) {
      var _iterator = _createForOfIteratorHelper(t),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _r4 = _step.value;

          var _t3 = void 0;

          if (_r4.contentBoxSize) {
            _t3 = (Array.isArray(_r4.contentBoxSize) ? _r4.contentBoxSize[0] : _r4.contentBoxSize).inlineSize;
          } else _t3 = _r4.contentRect.width;

          var _i2 = e.clientHeight,
              _a2 = _t3 * n / o;

          _a2 < _i2 && (_a2 = _i2, _t3 = _i2 * o / n), s.style.width = "".concat(_t3, "px"), s.style.height = "".concat(_a2, "px");
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }).observe(e);
  });
}

function bricksPhotoswipe() {
  var e = document.querySelector(".pswp");
  if (!e) return;
  var t = bricksQuerySelectorAll(document, ".bricks-lightbox");
  if (!t) return;
  var r = {};
  t.forEach(function (t) {
    var _t$dataset, _t$dataset2, _t$dataset3, _t$dataset4, _t$dataset5, _t$dataset6;

    if (t.classList.contains("pswp-init") || t.parentNode.classList.contains("swiper-slide-duplicate")) return;
    var i = (_t$dataset = t.dataset) === null || _t$dataset === void 0 ? void 0 : _t$dataset.bricksLightboxId,
        s = parseInt((_t$dataset2 = t.dataset) === null || _t$dataset2 === void 0 ? void 0 : _t$dataset2.bricksLightboxIndex) || 0;
    (r === null || r === void 0 ? void 0 : r[i]) || (r[i] = []);
    var a = ((_t$dataset3 = t.dataset) === null || _t$dataset3 === void 0 ? void 0 : _t$dataset3.bricksLightboxSource) || ((_t$dataset4 = t.dataset) === null || _t$dataset4 === void 0 ? void 0 : _t$dataset4.src) || t.src;
    if (!a) return;
    var o = ((_t$dataset5 = t.dataset) === null || _t$dataset5 === void 0 ? void 0 : _t$dataset5.bricksLightboxWidth) || t.width,
        n = ((_t$dataset6 = t.dataset) === null || _t$dataset6 === void 0 ? void 0 : _t$dataset6.bricksLightboxHeight) || t.height;
    r[i][s] = {
      src: a,
      w: o,
      h: n
    }, t.addEventListener("click", function (t) {
      var _t$target$dataset;

      if (!t.target.classList.contains("bricks-lightbox")) return 1;
      t.stopPropagation();
      var i = (_t$target$dataset = t.target.dataset) === null || _t$target$dataset === void 0 ? void 0 : _t$target$dataset.bricksLightboxId,
          s = r === null || r === void 0 ? void 0 : r[i];
      if (!s) return;
      new PhotoSwipe(e, PhotoSwipeUI_Default, s, {
        bgOpacity: .9,
        showHideOpacity: !0,
        index: parseInt(t.target.dataset.bricksLightboxIndex) || 0
      }).init();
    }), t.classList.add("pswp-init");
  });
}

function bricksAccordion() {
  var e = bricksQuerySelectorAll(document, ".brxe-accordion"),
      t = bricksQuerySelectorAll(document, ".brxe-accordion-nested");
  if (t.length && (e = e.concat(t)), !e.length) return;

  var r = function r(e) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
    e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = "".concat(t, "ms"), e.style.height = "".concat(e.offsetHeight, "px"), e.offsetHeight, e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, window.setTimeout(function () {
      e.style.display = "none", e.style.removeProperty("height"), e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property");
    }, t);
  },
      i = function i(e) {
    var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
    return "none" === window.getComputedStyle(e).display ? function (e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;
      e.style.removeProperty("display");
      var r = window.getComputedStyle(e).display;
      "none" === r && (r = "block"), e.style.display = r;
      var i = e.offsetHeight;
      e.style.overflow = "hidden", e.style.height = 0, e.style.paddingTop = 0, e.style.paddingBottom = 0, e.style.marginTop = 0, e.style.marginBottom = 0, e.offsetHeight, e.style.transitionProperty = "height, margin, padding", e.style.transitionDuration = "".concat(t, "ms"), e.style.height = "".concat(i, "px"), e.style.removeProperty("padding-top"), e.style.removeProperty("padding-bottom"), e.style.removeProperty("margin-top"), e.style.removeProperty("margin-bottom"), window.setTimeout(function () {
        e.style.removeProperty("height"), e.style.removeProperty("overflow"), e.style.removeProperty("transition-duration"), e.style.removeProperty("transition-property");
      }, t);
    }(e, t) : r(e, t);
  };

  e.forEach(function (e) {
    var t = Array.from(e.children),
        s = e.hasAttribute("data-transition") ? isNaN(e.dataset.transition) ? 0 : e.dataset.transition : 200;
    t = t.filter(function (e) {
      return e.classList.contains("brxe-section") || e.classList.contains("brxe-container") || e.classList.contains("brxe-block") || e.classList.contains("brxe-div") || e.classList.contains("accordion-item");
    }), t.forEach(function (t, a) {
      var _e$dataset$scriptArgs;

      0 === a && (_e$dataset$scriptArgs = e.dataset.scriptArgs) !== null && _e$dataset$scriptArgs !== void 0 && _e$dataset$scriptArgs.includes("expandFirstItem") && t.classList.add("brx-open"), t.classList.contains("listening") || (t.classList.add("listening"), t.addEventListener("click", function (t) {
        t.stopPropagation();
        var a = t.target.closest(".accordion-title-wrapper");
        if (!a) return;
        var o = a.parentNode;
        if (!o) return;
        var n = o.querySelector(".accordion-content-wrapper");

        if (n) {
          var _e$dataset$scriptArgs2;

          if (!((_e$dataset$scriptArgs2 = e.dataset.scriptArgs) !== null && _e$dataset$scriptArgs2 !== void 0 && _e$dataset$scriptArgs2.includes("independentToggle"))) {
            var _t4 = e.querySelector(".brx-open");

            if (_t4) {
              var _e9 = _t4.querySelector(".accordion-content-wrapper");

              _e9 && _e9 !== n && (_t4.classList.remove("brx-open"), r(_e9, s));
            }
          }

          i(n, s), o.classList.toggle("brx-open");
        }
      }));
    });
  });
}

function bricksAnimatedTyping() {
  bricksQuerySelectorAll(document, ".brxe-animated-typing").forEach(function (e) {
    var t,
        r = e.dataset.scriptId;

    try {
      t = JSON.parse(e.dataset.scriptArgs);
    } catch (e) {
      return !1;
    }

    var i = e.querySelector(".typed");
    i && (window.bricksData.animatedTypingInstances[r] && window.bricksData.animatedTypingInstances[r].destroy(), t.hasOwnProperty("strings") && t.strings && (Array.isArray(t.strings) && !t.strings.toString() || (window.bricksData.animatedTypingInstances[r] = new Typed(i, t))));
  });
}

function bricksAudio() {
  bricksQuerySelectorAll(document, ".brxe-audio").forEach(function (e) {
    var t = e.querySelector("audio");

    if (t) {
      new MediaElementPlayer(t);
    }
  });
}

function bricksCountdown() {
  var e = function e(_e12, t, r) {
    var i = t.date.replace(" ", "T"),
        s = new Date(i).getTime() - new Date().getTime();

    if (s <= 0) {
      if (clearInterval(_e12.dataset.bricksCountdownId), "hide" === t.action) return void (_e12.innerHTML = "");
      if ("text" === t.action) return void (_e12.innerHTML = t.actionText);
    }

    r && (_e12.innerHTML = "", t.fields.forEach(function (t) {
      if (!t.format) return;
      var r = document.createElement("div");

      if (r.classList.add("field"), t.prefix) {
        var _e10 = document.createElement("span");

        _e10.classList.add("prefix"), _e10.innerHTML = t.prefix, r.appendChild(_e10);
      }

      var i = document.createElement("span");

      if (i.classList.add("format"), r.appendChild(i), t.suffix) {
        var _e11 = document.createElement("span");

        _e11.classList.add("suffix"), _e11.innerHTML = t.suffix, r.appendChild(_e11);
      }

      _e12.appendChild(r);
    }));
    var a = bricksQuerySelectorAll(_e12, ".field"),
        o = Math.floor(s / 864e5),
        n = Math.floor(s % 864e5 / 36e5),
        l = Math.floor(s % 36e5 / 6e4),
        c = Math.floor(s % 6e4 / 1e3);
    t.fields.forEach(function (e, t) {
      if (!e.format) return;
      var r = e.format.toLowerCase();
      r.includes("%d") ? (e.format.includes("%D") && o <= 9 && (o = "0".concat(o)), a[t].querySelector(".format").innerHTML = r.replace("%d", s <= 0 ? 0 : o)) : r.includes("%h") ? (e.format.includes("%H") && n <= 9 && (n = "0".concat(n)), a[t].querySelector(".format").innerHTML = r.replace("%h", s <= 0 ? 0 : n)) : r.includes("%m") ? (e.format.includes("%M") && l <= 9 && (l = "0".concat(l)), a[t].querySelector(".format").innerHTML = r.replace("%m", s <= 0 ? 0 : l)) : r.includes("%s") && (e.format.includes("%S") && c <= 9 && (c = "0".concat(c)), a[t].querySelector(".format").innerHTML = r.replace("%s", s <= 0 ? 0 : c));
    });
  };

  bricksQuerySelectorAll(document, ".brxe-countdown").forEach(function (t) {
    var r = t.dataset.bricksCountdownOptions;

    try {
      r = JSON.parse(r);
    } catch (e) {
      return !1;
    }

    if (r.hasOwnProperty("date") && r.hasOwnProperty("fields")) {
      var i = t.dataset.bricksCountdownId;
      i && clearInterval(i), e(t, r, !0), i = setInterval(e, 1e3, t, r, !1), t.dataset.bricksCountdownId = i;
    }
  });
}

function bricksCounter() {
  bricksQuerySelectorAll(document, ".brxe-counter").forEach(function (e) {
    var t = e.dataset.bricksCounterOptions;

    try {
      t = JSON.parse(t);
    } catch (e) {
      return !1;
    }

    var r = e.querySelector(".count"),
        i = t.hasOwnProperty("countFrom") ? parseInt(t.countFrom) : 0,
        s = t.hasOwnProperty("countTo") ? parseInt(t.countTo) : 100,
        a = t.hasOwnProperty("duration") ? parseInt(t.duration) : 1e3;
    a < 500 && (a = 500);
    var o = a / (s - i),
        n = 1;
    o < 4 && (n = Math.ceil(4 / o), o = 4);

    var l = function l() {
      var e = r.innerText.replace(/\D/g, "");
      e = isNaN(e) ? i : parseInt(e);
      var a = e + n < s ? e + n : s;
      if (e >= s) return clearInterval(r.dataset.counterId), void delete r.dataset.counterId;
      r.innerText = t.thousands ? a.toLocaleString() : a;
    };

    new BricksIntersect({
      element: e,
      callback: function callback() {
        r.innerText = i, r.dataset.counterId || (r.dataset.counterId = setInterval(l, o));
      }
    });
  });
}

function bricksForm() {
  bricksQuerySelectorAll(document, ".brxe-form").forEach(function (e) {
    var t = e.getAttribute("data-element-id");
    bricksQuerySelectorAll(e, 'input[type="checkbox"]').forEach(function (t) {
      t.required && t.addEventListener("click", function (r) {
        var i = t.getAttribute("name"),
            s = bricksQuerySelectorAll(e, "input[name=\"".concat(i, "\"]")),
            a = !1;
        s.forEach(function (e) {
          !0 === e.checked && (a = !0);
        }), a ? s.forEach(function (e) {
          e.required = !1;
        }) : s.forEach(function (e) {
          e.required = !0;
        });
      });
    }), bricksQuerySelectorAll(e, ".flatpickr").forEach(function (e) {
      var t = e.dataset.bricksDatepickerOptions;
      t && (t = JSON.parse(t), flatpickr(e, t));
    });
    var r = {};
    bricksQuerySelectorAll(e, "input[type=file]").forEach(function (t) {
      var i = t.getAttribute("data-files-ref"),
          s = t.getAttribute("data-maxsize") || !1,
          a = t.getAttribute("data-limit") || !1;
      s = !!s && 1024 * parseInt(s) * 1024, t.addEventListener("change", function (o) {
        var n = o.target.files,
            l = n.length,
            c = t.getAttribute("name");
        if (!l) return;
        var d = e.querySelector(".file-result[data-files-ref=\"".concat(i, "\"]"));

        var _loop = function _loop(_e13) {
          var t = n[_e13],
              i = !1,
              o = d.cloneNode(!0);
          if (a && r.hasOwnProperty(c) && r[c].length >= a && (i = "limit"), s && t.size > s && (i = "size"), i) o.classList.add("danger"), o.innerHTML = o.getAttribute("data-error-".concat(i)).replace("%s", t.name), setTimeout(function () {
            o.remove();
          }, 5e3);else {
            r.hasOwnProperty(c) || (r[c] = []), r[c].push(t), o.classList.add("show");

            var _e14 = o.querySelector(".text"),
                _i3 = o.querySelector(".remove");

            _e14.innerHTML = t.name, _i3.setAttribute("data-name", t.name), _i3.setAttribute("data-field", c), _i3.addEventListener("click", function (e) {
              var t = e.target.getAttribute("data-name"),
                  i = e.target.getAttribute("data-field"),
                  s = r[i];

              for (var _e15 = 0; _e15 < s.length; _e15++) {
                if (s[_e15].name === t) {
                  r[c].splice(_e15, 1);
                  break;
                }
              }

              o.remove();
            });
          }
          d.parentNode.insertBefore(o, d.nextSibling);
        };

        for (var _e13 = 0; _e13 < l; _e13++) {
          _loop(_e13);
        }
      });
    }), e.addEventListener("submit", function (i) {
      if (i.preventDefault(), !bricksIsFrontend) return;
      var s = document.getElementById("recaptcha-".concat(t)),
          a = e.querySelector(".recaptcha-error");
      if (!s) return void bricksSubmitForm(t, e, r, null);
      var o = s.getAttribute("data-key");
      if (o) try {
        grecaptcha.ready(function () {
          try {
            grecaptcha.execute(o, {
              action: "bricks_form_submit"
            }).then(function (i) {
              a.classList.remove("show"), bricksSubmitForm(t, e, r, i);
            })["catch"](function (t) {
              a.classList.add("show"), e.querySelector(".alert").innerText = "Google reCaptcha ".concat(t);
            });
          } catch (t) {
            a.classList.add("show"), e.querySelector(".alert").innerText = "Google reCaptcha ".concat(t);
          }
        });
      } catch (t) {
        a.classList.add("show"), e.querySelector(".alert").innerText = "Google reCaptcha ".concat(t);
      } else a.classList.add("show");
    });
  });
}

function bricksSubmitForm(e, t, r, i) {
  var s = t.querySelector("button[type=submit]");
  s.classList.add("sending");
  var a = new FormData(t);
  a.append("action", "bricks_form_submit"), a.append("postId", window.bricksData.postId), a.append("formId", e), a.append("recaptchaToken", i || ""), a.append("nonce", window.bricksData.nonce), a.append("referrer", location.toString());

  var _loop2 = function _loop2(_e16) {
    r[_e16].forEach(function (t) {
      a.append("".concat(_e16, "[]"), t, t.name);
    });
  };

  for (var _e16 in r) {
    _loop2(_e16);
  }

  var o = window.bricksData.ajaxUrl,
      n = new XMLHttpRequest();
  n.open("POST", o, !0), n.onreadystatechange = function () {
    var e = function (e) {
      try {
        return JSON.parse(e);
      } catch (e) {
        return null;
      }
    }(n.response);

    if (window.bricksData.debug && console.warn("bricks_form_submit", n, e), !e) return;
    e.success && e.data.hasOwnProperty("action") && ("mailchimp" === e.data.action || "sendgrid" === e.data.action) && (window.dataLayer = window.dataLayer || [], window.dataLayer.push({
      event: "bricksNewsletterSignup"
    })), e.success && e.data.hasOwnProperty("redirectTo") && (e.data.hasOwnProperty("redirectTimeout") ? setTimeout(function () {
      window.location.href = e.data.redirectTo;
    }, parseInt(e.data.redirectTimeout)) : window.location.href = e.data.redirectTo), t.querySelector(".message") && t.querySelector(".message").remove();
    var i = document.createElement("div");
    i.classList.add("message");
    var a = document.createElement("div");
    if (a.classList.add("text"), e.data.hasOwnProperty("message")) if (e.data.message.hasOwnProperty("errors")) {
      var _t5 = e.data.message.errors;
      Object.keys(_t5).forEach(function (e) {
        a.innerHTML += _t5[e][0] + "<br>";
      });
    } else a.innerHTML = e.data.message;

    if (i.appendChild(a), e.data.hasOwnProperty("info")) {
      var _t6 = document.createElement("div"),
          _r5 = document.createElement("div");

      _r5.innerHTML = e.data.info.join("<br>"), i.appendChild(_t6), _t6.appendChild(_r5);
    } else i.classList.add(e.data.type);

    if (t.appendChild(i), s.classList.remove("sending"), e.success) {
      t.reset(), r = {};

      var _e17 = bricksQuerySelectorAll(t, ".file-result");

      null !== _e17 && _e17.forEach(function (e) {
        e.remove();
      });
    }
  }, n.send(a);
}

function bricksIsotope() {
  bricksQuerySelectorAll(document, ".bricks-layout-wrapper.isotope").forEach(function (e) {
    var t = {
      itemSelector: ".bricks-layout-item",
      percentPosition: !0
    },
        r = e.getAttribute("data-layout");
    "grid" === r ? (t.layoutMode = "fitRows", t.fitRows = {
      gutter: ".bricks-gutter-sizer"
    }) : "masonry" !== r && "metro" !== r || (t.masonry = {
      columnWidth: ".bricks-isotope-sizer",
      gutter: ".bricks-gutter-sizer"
    });
    var i = new Isotope(e, t),
        s = e.parentNode.querySelector(".bricks-isotope-filters");
    s && s.addEventListener("click", function (e) {
      var t = e.target.getAttribute("data-filter"),
          r = s.querySelector("li.active");
      t && bricksIsFrontend && (r && r.classList.remove("active"), e.target.classList.add("active"), i.arrange({
        filter: t
      }));
    });
  });
}

function bricksMap() {
  bricksQuerySelectorAll(document, ".brxe-map").forEach(function (e, t) {
    setTimeout(function () {
      var t = function () {
        var t = e.dataset.bricksMapOptions;
        if (!t) return !1;

        try {
          return JSON.parse(t);
        } catch (e) {
          return !1;
        }
      }();

      if (!t) return;
      var r = Array.isArray(t === null || t === void 0 ? void 0 : t.addresses) ? t.addresses : [{
        address: "Berlin, Germany"
      }],
          i = [],
          s = {};
      (t === null || t === void 0 ? void 0 : t.marker) && (s.icon = {
        url: t.marker
      }, (t === null || t === void 0 ? void 0 : t.markerHeight) && (t === null || t === void 0 ? void 0 : t.markerWidth) && (s.icon.scaledSize = new google.maps.Size(parseInt(t.markerWidth), parseInt(t.markerHeight))));
      var a = {};
      (t === null || t === void 0 ? void 0 : t.markerActive) && (a = {
        url: t.markerActive
      }, (t === null || t === void 0 ? void 0 : t.markerActiveHeight) && (t === null || t === void 0 ? void 0 : t.markerActiveWidth) && (a.scaledSize = new google.maps.Size(parseInt(t.markerActiveWidth), parseInt(t.markerActiveHeight))));
      var o = [],
          n = new google.maps.LatLngBounds(),
          l = "auto";
      t.draggable ? t.scrollwheel && t.draggable ? l = "cooperative" : !t.scrollwheel && t.draggable && (l = "greedy") : l = "none", t.disableDefaultUI && (t.fullscreenControl = !1, t.mapTypeControl = !1, t.streetViewControl = !1, t.zoomControl = !1);
      var c = t.zoom ? parseInt(t.zoom) : 12,
          d = {
        zoom: c,
        gestureHandling: l,
        fullscreenControl: t.fullscreenControl,
        mapTypeControl: t.mapTypeControl,
        streetViewControl: t.streetViewControl,
        zoomControl: t.zoomControl,
        disableDefaultUI: t.disableDefaultUI
      };
      t.zoomControl && (t !== null && t !== void 0 && t.maxZoom && (d.maxZoom = parseInt(t.maxZoom)), (t === null || t === void 0 ? void 0 : t.minZoom) && (d.minZoom = parseInt(t.minZoom)));
      var u = new google.maps.Map(e, d);

      for (var _e18 = 0; _e18 < r.length; _e18++) {
        var _t7 = r[_e18];
        if (_t7 !== null && _t7 !== void 0 && _t7.latitude && _t7 !== null && _t7 !== void 0 && _t7.longitude) b(_t7, {
          lat: parseFloat(_t7.latitude),
          lng: parseFloat(_t7.longitude)
        });else if (_t7 !== null && _t7 !== void 0 && _t7.address) {
          new google.maps.Geocoder().geocode({
            address: _t7.address
          }, p(_t7));
        }
      }

      function p(e) {
        return function (t, r) {
          if ("OK" !== r) return void console.warn("Geocode error:", r);
          var i = t[0].geometry.location;
          b(e, i);
        };
      }

      function b(e, t) {
        s.map = u, s.position = t;
        var l = new google.maps.Marker(s);

        if (l.setMap(u), i.push(l), google.maps.event.addListener(l, "click", function () {
          !function (e) {
            var _a3, _b;

            (s === null || s === void 0 ? void 0 : s.icon) && i.forEach(function (e) {
              e.setIcon(s.icon);
            });
            o.forEach(function (e) {
              e.hide();
            }), ((_a3 = a) === null || _a3 === void 0 ? void 0 : _a3.url) && l.setIcon(a);
            var r = "",
                c = (e === null || e === void 0 ? void 0 : e.infoTitle) || !1,
                d = (e === null || e === void 0 ? void 0 : e.infoSubtitle) || !1,
                p = (e === null || e === void 0 ? void 0 : e.infoOpeningHours) || !1,
                b = (e === null || e === void 0 ? void 0 : e.infoImages) || {};
            Array.isArray(b) || (b = Array.isArray((_b = b) === null || _b === void 0 ? void 0 : _b.images) ? b.images : []);
            c && (r += "<h3 class=\"title\">".concat(c, "</h3>"));
            d && (r += "<p class=\"subtitle\">".concat(d, "</p>"));
            p && (r += '<ul class="content">', p = p.split("\n"), p.length && p.forEach(function (e) {
              r += "<li>".concat(e, "</li>");
            }), r += "</ul>");
            b.length && (r += '<ul class="images">', b.forEach(function (t, i) {
              r += "<li>", t.url && (r += "<img\n\t\t\t\t\t\t\t\t\tsrc=\"".concat(t.url, "\"\n\t\t\t\t\t\t\t\t\tclass=\"bricks-lightbox\"\n\t\t\t\t\t\t\t\t\tdata-bricks-lightbox-source=\"").concat(t.full, "\"\n\t\t\t\t\t\t\t\t\tdata-bricks-lightbox-height=\"376\"\n\t\t\t\t\t\t\t\t\tdata-bricks-lightbox-width=\"376\"\n\t\t\t\t\t\t\t\t\tdata-bricks-lightbox-index=\"").concat(i, "\"\n\t\t\t\t\t\t\t\t\tdata-bricks-lightbox-id=\"").concat(e.id, "\"\n\t\t\t\t\t\t\t\t/>")), r += "</li>";
            }), r += "</ul>");

            if (r) {
              var _e19 = {
                content: r,
                disableAutoPan: !1,
                pixelOffset: new google.maps.Size(0, 0),
                alignBottom: !1,
                infoBoxClearance: new google.maps.Size(20, 20),
                enableEventPropagation: !1,
                zIndex: 1001,
                boxStyle: {
                  opacity: 1,
                  zIndex: 999,
                  top: 0,
                  left: 0
                }
              };
              void 0 !== window.jQuery && (_e19.closeBoxURL = "", _e19.content += '<span class="close">×</span>');

              var _i4 = new InfoBox(_e19);

              _i4.open(u, l), o.push(_i4), u.panTo(_i4.getPosition()), google.maps.event.addListener(_i4, "domready", function (e) {
                void 0 !== window.jQuery && jQuery(".close").on("click", function () {
                  _i4.close(), s !== null && s !== void 0 && s.icon && l.setIcon(s.icon), n.extend(t), u.fitBounds(n), u.panToBounds(n);
                });
              });
            }
          }(e);
        }), n.extend(t), u.fitBounds(n), u.panToBounds(n), 1 === r.length) {
          var _e20 = google.maps.event.addListener(u, "idle", function () {
            u.setZoom(c), google.maps.event.removeListener(_e20);
          });
        }
      }

      if (t !== null && t !== void 0 && t.type && u.setMapTypeId(t.type), t !== null && t !== void 0 && t.style) if ("custom" === t.style && t !== null && t !== void 0 && t.customStyle) {
        var _e21 = JSON.stringify(t.customStyle);

        u.setOptions({
          styles: JSON.parse(_e21)
        });
      } else window.bricksData && window.bricksData.mapStyles[t.style] && u.setOptions({
        styles: JSON.parse(window.bricksData.mapStyles[t.style].style)
      });
    }, 1e3 * t);
  });
}

function bricksPieChart() {
  bricksQuerySelectorAll(document, ".brxe-pie-chart").forEach(function (e) {
    new BricksIntersect({
      element: e,
      callback: function callback(e) {
        var t = e.getElementsByTagName("canvas");
        t.length && t[0].remove(), new EasyPieChart(e, {
          size: e.dataset.size && e.dataset.size > 0 ? e.dataset.size : 160,
          lineWidth: e.dataset.lineWidth,
          barColor: e.dataset.barColor,
          trackColor: e.dataset.trackColor,
          lineCap: e.dataset.lineCap,
          scaleColor: e.dataset.scaleColor,
          scaleLength: e.dataset.scaleLength,
          rotate: 0
        });
      },
      threshold: 1
    });
  });
}

function bricksPricingTables() {
  bricksQuerySelectorAll(document, ".brxe-pricing-tables").forEach(function (e, t) {
    var r = bricksQuerySelectorAll(e, ".tab"),
        i = bricksQuerySelectorAll(e, ".pricing-table");
    r.forEach(function (e) {
      e.classList.contains("listening") || (e.classList.add("listening"), e.addEventListener("click", function () {
        e.classList.contains("active") || (i.forEach(function (e) {
          e.classList.toggle("active");
        }), r.forEach(function (e) {
          e.classList.remove("active");
        }), e.classList.add("active"));
      }));
    });
  });
}

function bricksProgressBar() {
  bricksQuerySelectorAll(document, ".brxe-progress-bar span").forEach(function (e) {
    new BricksIntersect({
      element: e,
      callback: function callback() {
        e.dataset.width && setTimeout(function () {
          e.style.width = e.dataset.width;
        }, "slow");
      },
      threshold: 1
    });
  });
}

function bricksSplide() {
  bricksQuerySelectorAll(document, ".brxe-slider-nested.splide").forEach(function (e) {
    var t = bricksQuerySelectorAll(e, [".splide__list > .brxe-container", ".splide__list > .brxe-block", ".splide__list > .brxe-div"]);
    t.forEach(function (e) {
      e.classList.add("splide__slide"), e.dataset.id = e.id;
    });
    var r = e.dataset.scriptId;
    window.bricksData.splideInstances.hasOwnProperty(r) && window.bricksData.splideInstances[r].destroy();
    var i = new Splide(e);
    i.mount(), window.bricksData.splideInstances[r] = i, t.forEach(function (t, r) {
      if (t.dataset.id) {
        t.id = t.dataset.id;

        var _i5 = e.querySelector(".splide__pagination");

        if (_i5) {
          var _e22 = _i5.querySelector("li:nth-child(".concat(r + 1, ") .splide__pagination__page"));

          _e22 && _e22.setAttribute("aria-controls", t.id);
        }
      }

      if (!t.classList.contains("bricks-lazy-hidden")) {
        var _e23 = t.getAttribute("style") || "";

        t.dataset.style && (_e23 += t.dataset.style, t.setAttribute("style", _e23));
      }
    });
  });
}

function bricksSwiper() {
  bricksQuerySelectorAll(document, ".bricks-swiper-container").forEach(function (e) {
    var _t8, _t9, _t10, _t11;

    var t;

    try {
      t = JSON.parse(e.dataset.scriptArgs);
    } catch (r) {
      console.warn("bricksSwiper: Error parsing JSON of data-script-args", e), t = {};
    }

    var r = e.classList.contains("[class*=brxe-]") ? e : e.closest("[class*=brxe-]");
    if (!r) return;
    bricksQuerySelectorAll(e, [".splide__list > .brxe-container", ".splide__list > .brxe-block", ".splide__list > .brxe-div"]).forEach(function (e) {
      return e.classList.add("swiper-slide");
    });
    var i = r.dataset.scriptId,
        s = window.bricksData.swiperInstances.hasOwnProperty(i) ? window.bricksData.swiperInstances[i] : void 0;
    s && s.destroy(), t.observer = !1, t.observeParents = !0, t.resizeObserver = !0, t.slidesToShow = t.hasOwnProperty("slidesToShow") ? t.slidesToShow : 1, t.slidesPerGroup = t.hasOwnProperty("slidesPerGroup") ? t.slidesPerGroup : 1, t.speed = t.hasOwnProperty("speed") ? parseInt(t.speed) : 300, t.effect = t.hasOwnProperty("effect") ? t.effect : "slide", t.spaceBetween = t.hasOwnProperty("spaceBetween") ? t.spaceBetween : 0, t.initialSlide = t.hasOwnProperty("initialSlide") ? t.initialSlide : 0, (_t8 = t) !== null && _t8 !== void 0 && _t8.autoplay && (t.autoplay = {
      delay: ((_t9 = t) === null || _t9 === void 0 ? void 0 : _t9.autoplaySpeed) || 3e3,
      disableOnInteraction: !0
    }, delete t.autoplaySpeed, (_t10 = t) !== null && _t10 !== void 0 && _t10.pauseOnHover && (t.autoplay.disableOnInteraction = !1, t.autoplay.pauseOnMouseEnter = !0, delete t.pauseOnHover), (_t11 = t) !== null && _t11 !== void 0 && _t11.stopOnLastSlide && (t.autoplay.stopOnLastSlide = !0, delete t.stopOnLastSlide)), t.keyboard = {
      enabled: bricksIsFrontend,
      onlyInViewport: !0
    }, t.watchOverflow = !0, t.hasOwnProperty("effect") && "flip" === t.effect && (t.flipEffect = {
      slideShadows: !1
    }), t.hasOwnProperty("effect") && "fade" === t.effect && (t.fadeEffect = {
      crossFade: !0
    }), t.navigation && (t.navigation = {
      prevEl: r.querySelector(".bricks-swiper-button-prev"),
      nextEl: r.querySelector(".bricks-swiper-button-next")
    }), t.pagination && (t.pagination = {
      el: r.querySelector(".swiper-pagination"),
      type: "bullets",
      clickable: !0
    }, 1 == t.dynamicBullets && (delete t.dynamicBullets, t.pagination.dynamicBullets = !0)), s = new Swiper(e, t), window.bricksData.swiperInstances[i] = s;
  });
}

function bricksVideo() {
  bricksQuerySelectorAll(document, ".brxe-video").forEach(function (e) {
    bricksIsFrontend && e.addEventListener("click", function () {
      var t = e.querySelector(".bricks-video-overlay"),
          r = e.querySelector(".bricks-video-overlay-icon");
      t && t.remove(), r && r.remove();
    });
    var t = e.querySelector("video");

    if (t) {
      if (window.hasOwnProperty("Plyr")) {
        var _window$bricksData, _window$bricksData$vi;

        var _t12 = e.dataset.scriptId,
            r = e.querySelector(".bricks-plyr"),
            i = ((_window$bricksData = window.bricksData) === null || _window$bricksData === void 0 ? void 0 : (_window$bricksData$vi = _window$bricksData.videoInstances) === null || _window$bricksData$vi === void 0 ? void 0 : _window$bricksData$vi[_t12]) || void 0;
        i && i.destroy(), r && (i = new Plyr(r)), window.bricksData.videoInstances[_t12] = i;
      }

      t.setAttribute("playsinline", !0);
    }
  });
}

function bricksFacebookSDK() {
  if (!document.querySelector(".brxe-facebook-page")) return;
  var e = window.bricksData.hasOwnProperty("locale") ? window.bricksData.locale : "en_US",
      t = window.bricksData.hasOwnProperty("facebookAppId") ? window.bricksData.facebookAppId : null,
      r = "https://connect.facebook.net/".concat(e, "/sdk.js"),
      i = new XMLHttpRequest();
  i.open("GET", r), i.onreadystatechange = function () {
    if (4 == this.readyState && 200 == this.status) {
      var _e24 = document.createElement("script");

      _e24.type = "text/javascript", _e24.id = "bricks-facebook-page-sdk", _e24.appendChild(document.createTextNode(i.responseText)), document.body.appendChild(_e24), FB.init({
        appId: t,
        version: "v3.3",
        xfbml: !0
      });
    }
  }, i.send();
}

function bricksPrettify() {
  if (!window.hasOwnProperty("PR")) return;
  PR.prettyPrint();
  var e = bricksQuerySelectorAll(document, ".prettyprint.prettyprinted");
  !bricksIsFrontend && e.length && e.forEach(function (e) {
    e.classList.remove("prettyprinted"), PR.prettyPrint();
  });
}

function bricksSkipLinks() {
  var e = bricksQuerySelectorAll(document, ".skip-link");
  e && e.forEach(function (e) {
    e.addEventListener("click", function (t) {
      t.preventDefault();
      var r = document.getElementById(e.href.split("#")[1]);
      r && (r.setAttribute("tabindex", "-1"), r.addEventListener("blur", function () {
        r.removeAttribute("tabindex");
      }, {
        once: !0
      }), r.focus());
    });
  });
}

var bricksIsFrontend;
document.addEventListener("DOMContentLoaded", function (e) {
  var t;
  bricksIsFrontend = document.body.classList.contains("bricks-is-frontend"), bricksStickyHeader(), bricksNavSubmenuPositioning(), bricksOnePageNavigation(), bricksPrettify(), bricksSkipLinks(), bricksAccordion(), bricksAnimatedTyping(), bricksAudio(), bricksCountdown(), bricksCounter(), bricksIsotope(), bricksPricingTables(), bricksSplide(), bricksSwiper(), bricksVideo(), bricksLightbox(), bricksFacebookSDK(), setTimeout(function () {
    bricksLazyLoad(), bricksAnimation(), bricksPieChart(), bricksProgressBar(), bricksForm(), bricksSmoothScroll(), bricksQueryInfiniteScroll(), bricksQueryPagination();
  }, 200), bricksSearchOverlay(), bricksMobileMenuToggles(), bricksNavMenuA11y(), bricksAlertDismiss(), bricksTabs(), bricksVideoOverlayClickDetector(), bricksBackgroundVideoInit(), bricksPhotoswipe(), window.addEventListener("resize", function () {
    clearTimeout(t), t = setTimeout(bricksSwiper, 250), t = setTimeout(bricksSplide, 250);
  });
});
